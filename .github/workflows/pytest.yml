name: Run tests with Postgres

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.8]
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: policies_notifications-test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install Postgres client
        run: sudo apt-get install postgresql-client
      - name: Install pgcrypto extension
        run: psql -h localhost -U postgres -d policies_notifications-test -c "CREATE EXTENSION pgcrypto;"
        env:
          PGPASSWORD: postgres
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv
        run: pip install pipenv
      - name: Cache pipenv's virtualenv dir
        id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --dev
        env:
          CI: true
      - name: Lint with Flake8
        run: pipenv run flake8 . --count --ignore=E402,W503,W504 --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pipenv run pytest
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_PASSWORD: postgres
          DATABASE_USER: postgres
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
          KAFKA_QUEUE_EMAIL: platform.custom-policies.actions-email
          KAFKA_QUEUE_HOOK: platform.custom-policies.actions-webhook
          BOP_URL: https://localhost:3000/v1/sendEmails
          BOP_APITOKEN: none
          BOP_ENV: ci
          BOP_CLIENT_ID: policies
